<Project>

    <Target
        Name="ForceGenerationOfBindingRedirects"
        AfterTargets="ResolveAssemblyReferences"
        BeforeTargets="GenerateBindingRedirects"
        Condition="'$(AutoGenerateBindingRedirects)' == 'true' And Exists('$(MSBuildProjectDirectory)\Web.config')">
        <PropertyGroup>
            <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
        </PropertyGroup>
    </Target>

    <Target
        Name="ReplaceWebConfigWithGeneratedFromBindingRedirects"
        AfterTargets="Build"
        Condition="'$(AutoGenerateBindingRedirects)' == 'true' And Exists('$(MSBuildProjectDirectory)\Web.config')">
        <Sync
            Condition="Exists('$(OutputPath)\$(AssemblyName).dll.config')"
            SourceFiles="$(OutputPath)\$(AssemblyName).dll.config"
            DestinationFiles="$(MSBuildProjectDirectory)\Web.config" />
        <Delete
            Files="'$(MSBuildProjectDirectory)\Web.config'" />
    </Target>

    <UsingTask
        TaskName="Sync"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <DestinationFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.IO" />
            <Code Type="Class" Language="cs">
                <![CDATA[
                    using System;
                    using System.Collections.Generic;
                    using System.IO;
                    using System.Linq;

                    using Microsoft.Build.Framework;
                    using Microsoft.Build.Utilities;
                
                    public class Sync :
                        Microsoft.Build.Utilities.Task
                    {
                    
                        [Required]
                        public ITaskItem[] SourceFiles { get; set; }
                        
                        [Required]
                        public ITaskItem[] DestinationFiles { get; set; }
                        
                        bool AreFileContentsTheSame(FileInfo a, FileInfo b)
                        {
                            // number of bytes to read from file in single operation
                            const int BYTES_TO_READ = sizeof(Int64) * 512;
                        
                            // number of iterations to read for
                            int iterations = (int)Math.Ceiling((double)a.Length / BYTES_TO_READ);
                        
                            using (var ain = a.OpenRead())
                            using (var bin = b.OpenRead())
                            {
                                var abuf = new byte[BYTES_TO_READ];
                                var bbuf = new byte[BYTES_TO_READ];
                                
                                for (int j = 0; j < iterations; j++)
                                {
                                    var asz = ain.Read(abuf, 0, BYTES_TO_READ);
                                    var bsz = bin.Read(bbuf, 0, BYTES_TO_READ);
                                    
                                    // unequal read, unequal files
                                    if (asz != bsz)
                                        return false;
                                    
                                    // compare as Int64
                                    for (int k = 0; k < BYTES_TO_READ; k += sizeof(Int64))
                                        if (BitConverter.ToInt64(abuf, k) != BitConverter.ToInt64(bbuf, k))
                                            return false;
                                }
                            }
                            
                            return true;
                        }
                        
                        bool AreFilesTheSame(FileInfo a, FileInfo b)
                        {
                            // destination is missing
                            if (!b.Exists)
                                return false;
                                
                            // same file
                            if (string.Equals(a.FullName, b.FullName, StringComparison.OrdinalIgnoreCase))
                                return true;
                        
                            // file lengths are unequal
                            if (a.Length == b.Length)
                                return true;
                            
                            if (AreFileContentsTheSame(a, b))
                                return true;
                                
                            return false;
                        }
                
                        public override bool Execute()
                        {
                            if (SourceFiles.Length != DestinationFiles.Length)
                            {
                                Log.LogError("Mismatched source and destination files.");
                                return false;
                            }
                        
                            for (int i = 0; i < SourceFiles.Length; i++)
                            {
                                var s = SourceFiles[i].ItemSpec;
                                var d = DestinationFiles[i].ItemSpec;
                        
                                var a = new FileInfo(s);
                                var b = new FileInfo(d);
                                
                                if (!AreFilesTheSame(a, b))
                                {
                                    Log.LogMessage(@"Synchronizing file from '{0}' to '{1}'.", a.FullName, b.FullName);
                                    a.CopyTo(b.FullName, true);
                                }
                                else
                                {
                                    Log.LogMessage(@"Skipped synchronizing file from '{0}' to '{1}'.", a.FullName, b.FullName);
                                }
                            }
                            
                            return true;
                        }
                    
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
